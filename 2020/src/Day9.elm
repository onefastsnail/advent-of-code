module Day9 exposing (..)

import Array


type Result
    = Found Int
    | Nothing


puzzleInput : String
puzzleInput =
    "2\n32\n10\n49\n28\n42\n18\n29\n17\n46\n27\n24\n14\n31\n21\n13\n48\n1\n30\n23\n50\n8\n36\n6\n7\n3\n11\n19\n4\n40\n5\n9\n10\n12\n15\n16\n17\n20\n14\n88\n18\n66\n13\n21\n25\n22\n23\n26\n28\n83\n29\n24\n31\n19\n34\n27\n30\n33\n32\n35\n38\n44\n37\n50\n36\n39\n40\n60\n59\n56\n52\n43\n46\n47\n48\n71\n64\n49\n51\n82\n89\n62\n108\n123\n72\n73\n79\n153\n75\n85\n94\n83\n95\n90\n91\n93\n109\n99\n97\n148\n100\n111\n113\n124\n170\n161\n169\n160\n162\n147\n152\n178\n158\n238\n182\n212\n173\n181\n183\n213\n190\n196\n197\n338\n211\n299\n224\n237\n271\n305\n307\n344\n355\n325\n386\n340\n331\n418\n354\n356\n364\n363\n371\n373\n409\n387\n407\n408\n568\n435\n624\n659\n508\n576\n612\n632\n656\n665\n671\n685\n744\n1034\n764\n717\n729\n727\n734\n758\n794\n1031\n1058\n815\n843\n1067\n1570\n1084\n1792\n1321\n1188\n1283\n1288\n1493\n1538\n1405\n1402\n1444\n1446\n1552\n1451\n2041\n1461\n1573\n1601\n3034\n1873\n2416\n1658\n2509\n2734\n2272\n2367\n4272\n2471\n2590\n2978\n2944\n2898\n3062\n2846\n3102\n3474\n2897\n2912\n3024\n3119\n3259\n3174\n3531\n3930\n4025\n4074\n5264\n4639\n6031\n4743\n5730\n6080\n5061\n6283\n5743\n5744\n5758\n5936\n5809\n5921\n8738\n9818\n8592\n6650\n6293\n8235\n10575\n7461\n7955\n8713\n8817\n12092\n9382\n9804\n11745\n14156\n10804\n10805\n11487\n11664\n17409\n11567\n11730\n12102\n12214\n12943\n13754\n16053\n26858\n14248\n19685\n15416\n16174\n18621\n19621\n24316\n32564\n19186\n21291\n27630\n38807\n21609\n22292\n33393\n23297\n23669\n23944\n23832\n31787\n29807\n26697\n37423\n44055\n29664\n30422\n34602\n55893\n37783\n37807\n62986\n54366\n40477\n42483\n42900\n43901\n44906\n60099\n45589\n46966\n47129\n47613\n47776\n68738\n56361\n64409\n78035\n75590\n74323\n112639\n65024\n72385\n78260\n82713\n78284\n91030\n143061\n128302\n90259\n86801\n121936\n112153\n92555\n182814\n111375\n94742\n95389\n112800\n120770\n121385\n129433\n137409\n139347\n143308\n173673\n143284\n268415\n156544\n168543\n165085\n177060\n218561\n179356\n181543\n182190\n187297\n279852\n187944\n277579\n240808\n232151\n208189\n233570\n242155\n264693\n266842\n280693\n282631\n286592\n299828\n308369\n321629\n325087\n345603\n397917\n356416\n367300\n368840\n363733\n651471\n420867\n396133\n420095\n440340\n441759\n450344\n472882\n475725\n506848\n531535\n547535\n742496\n569223\n664785\n898835\n804073\n646716\n670690\n741736\n723716\n720149\n731033\n1466212\n1388501\n1349179\n816228\n923226\n973294\n1004417\n1122441\n948607\n979730\n1398951\n1038383\n1079070\n1116758\n1215939\n1289372\n1769157\n2052364\n1317406\n1366865\n2656237\n1454749\n1451182\n2087014\n2387562\n1896520\n1739454\n1764835\n1789522\n1921901\n1928337\n1953024\n2295009\n1986990\n2018113\n2117453\n3319889\n2195828\n2332697\n2505311\n4552757\n2684271\n2768588\n2772155\n2821614\n2905931\n3667791\n3807635\n3528976\n4285721\n3504289\n3757567\n3554357\n4148852\n3850238\n5238628\n4725179\n7631110\n6003463\n4135566\n4313281\n5515717\n4528525\n6301131\n5189582\n7081869\n5452859\n6410220\n5593769\n6579181\n6434907\n9039820\n7033265\n7286543\n7261856\n7906419\n7311924\n7404595\n11987035\n8163519\n12998364\n8448847\n8664091\n10531988\n11717876\n8841806\n10044242\n11490713\n12905693\n13814815\n11046628\n11863079\n12627034\n13696763\n13014088\n13468172\n14319808\n14691138\n14548399\n15925947\n14716519\n22997246\n15568114\n17112938\n16612366\n18886048\n17290653\n24490113\n24117747\n19888434\n31328885\n34534355\n22537341\n22909707\n23673662\n18272118\n24877167\n25641122\n26482260\n27333896\n27787980\n54270240\n31494061\n30116513\n30284633\n31829457\n37179087\n32180480\n33725304\n33903019\n36176701\n52806473\n38160552\n40809459\n41181825\n45447048\n41945780\n64855487\n43149285\n44754378\n88596333\n50518289\n53816156\n55121876\n57450409\n72230413\n60401146\n61610574\n61945970\n102515046\n71885856\n65905784\n113039872\n74534763\n76986160\n141841647\n126466061\n116480543\n81991284\n83127605\n114217302\n85095065\n119396379\n129656639\n196167477\n104334445\n105640165\n171602419\n112572285\n133831826\n122011720\n122347116\n123556544\n138932130\n137791640\n140440547\n142891944\n182626325\n151520923\n158977444\n242126085\n165118889\n167086349\n222059735\n263488465\n204491444\n272726514\n218212450\n209974610\n262452267\n216906730\n227651885\n234584005\n255843546\n244358836\n309978293\n261348184\n262488674\n279372677\n278232187\n307526896\n294412867\n421466118\n377060959\n324096333\n385298799\n421398174\n371577793\n426551179\n414466054\n745562451\n426881340\n513956682\n451490735\n444558615\n472750276\n462235890\n478942841\n500202382\n505707020\n734078075\n632925977\n655293146\n557604864\n572645054\n748638752\n1084416712\n1047392031\n750977673\n1318207505\n786043847\n798459133\n816136408\n859024669\n871439955\n878372075\n1546652602\n896049350\n941178731\n906794505\n934986166\n979145223\n984649861\n1005909402\n1205571031\n1288219123\n1130249918\n1212898010\n1306243616\n1557294915\n1499616425\n1614595541\n2332696449\n1712185758\n1802843855\n1584502980\n1657483802\n2065236084\n1843674530\n1749812030\n1774421425\n1847973236\n2436493534\n2593740764\n1912703907\n2541944776\n1963795084\n2962710040\n2136159320\n2335820949\n2805860041\n2343147928\n2712514435\n2863538531\n4942019361\n3084119405\n3296688738\n3927650908\n5140363268\n3760677143\n4729900084\n3431905227\n3618095955\n4368162189\n5055662363\n6521391672\n4048863227\n7378512895\n3876498991\n4306943012\n4299616033\n6740037522\n4848673755\n4479307248\n5427267333\n7345551965\n5206686459\n8373924588\n6912401758\n7452281594\n7173187729\n15547112317\n8244661180\n7050001182\n7192582370\n10996608850\n8097403203\n7494594946\n11728078131\n8176115024\n7925362218\n12167304855\n8606559045\n14667782675\n8778923281\n9148289788\n9327981003\n9685993707\n9906574581\n10633953792\n12119088217\n19592568288\n14085589487\n13962402940\n14365770099\n15117944588\n14544596128\n14687177316\n14242583552\n15670709970\n23446705956\n16101477242\n18810068816\n35694045530\n16531921263\n16704285499\n32202631233\n17385482326\n17927213069\n19234555584\n18476270791\n19013974710\n23868977521\n20540528373\n22753042009\n26081491157\n28047992427\n30946869051\n28787179680\n30215306098\n28929760868\n54708020240\n29913293522\n30344060794\n31772187212\n54815846572\n32633398505\n45319100943\n48734552496\n33236206762\n61987493310\n46524263218\n35312695395\n36403483860\n52968348107\n37490245501\n39554503083\n56425551951\n50453821895\n65635994240\n101541996393\n58392053221\n57716940548\n60257354316\n58843054390\n103422170002\n61685480734\n108991906812\n72187901588\n68548902157\n79760469980\n72790709845\n69639690622\n70726452263\n120093512517\n89371831967\n71716179255\n96660838176\n113225702423\n116559994938\n90008324978\n122641723483\n106879373846\n108170762443\n116108993769\n137477410528\n117235107611\n117974294864\n121942835050\n162799034823\n130234382891\n131325171356\n138188592779\n139275354420\n140265081412\n177605826109\n140366142885\n141355869877\n229636913379\n207982619842\n161088011222\n161724504233\n186669163154\n196887698824\n255423700390\n198179087421\n426524612203\n215050136289\n233344101380\n234083288633\n324857755933\n257601250496\n261559554247\n260131427829\n301989585645\n268422975670\n337253841709\n422647565469\n279540435832\n280631224297\n494214716462\n281722012762\n339534957298\n537714044719\n706065048035\n420013264534\n358612203057\n455780337917\n448394237669\n413229223710\n431523188801\n818345269016\n449133424922\n621256970060\n502506264303\n517732678325\n562121013474\n521690982076\n528554403499\n547963411502\n627035178727\n560171660129\n694951236472\n638152638889\n562353237059\n640334215819\n698147160355\n979869173117\n771841426767\n778625467591\n880656613723\n814392540974\n861623461379\n844752412511\n949255867126\n1071857404620\n997096836424\n1766808641092\n1020238942628\n1065696089827\n1392715824013\n1088726063628\n1050245385575\n1076517815001\n1108135071631\n1122524897188\n1198324299018\n1556574697851\n2248569684593\n1758494640708\n1578803774078\n1946352703550\n2012716839992\n1988791685354\n1593018008565\n1659144953485\n1676016002353\n2142763839816\n2211250960816\n1969494809754\n2667529837706\n2105231908055\n2070484328203\n2085935032455\n2115941475402\n2126763200576\n2196861135259\n2158380457206\n2199042712189\n3605734848557\n2320849196206\n3284259331473\n4200042646170\n4304274620244\n3664807687707\n3171821782643\n3252162962050\n3663502336768\n3628639763239\n3775086428887\n5691669881012\n3746500330556\n4039979137957\n4055429842209\n4323624335835\n4175716236258\n4156419360658\n6155920613359\n4201876507857\n5449024097309\n4285143657782\n4395903847448\n4357423169395\n5492670978849\n5573012158256\n5605108527679\n6423984744693\n6800461545882\n6835324119411\n6836629470350\n6880802725289\n6915665298818\n7703481474725\n7375140093795\n8031643988338\n7786479468513\n10479414586902\n8095408980166\n8412853011604\n8358295868515\n8487020165639\n8681047505230\n8642566827177\n9734167755091\n8753327016843\n11996996902949\n14060032323895\n13796468024107\n11065683137105\n11178120685935\n16056187599025\n13260614215043\n13716126844700\n13671953589761\n18376734582268\n16444496999942\n15011074278984\n15078621568520\n24894247530635\n16144775337028\n15881888448679\n16737975807343\n20484017068588\n23450294599791\n17129586992816\n17168067670869\n17323614332407\n27130061599111\n18487494771934\n31120082356514\n22243803823040\n24326297352148\n28683027868745\n28307707678751\n24438734900978\n26932567804804\n28271688494027\n47889029500769\n39449809179962\n30089695847504\n46534192847446\n65018616493585\n44453675931518\n33312843007897\n34632270108962\n41494365023017\n42727820891628\n34297654663685\n34453201325223\n41455884344964\n34491682003276\n49373865422151\n40731298594974\n67945113116859\n68892410832496\n56541458486725\n58772723716249\n51371302705782\n52710423395005\n54528430748482\n61564837913766\n87342693503967\n92101686313779\n63402538855401"


parsePuzzleInput : String -> List Int
parsePuzzleInput str =
    String.split "\n" str
        |> List.map (\a -> String.toInt a |> Maybe.withDefault 0)


hasSum : List Int -> Int -> Bool
hasSum numbers number =
    List.any
        (\a ->
            List.drop 1 numbers
                |> List.any
                    (\b ->
                        let
                            check =
                                a + b == number
                        in
                        check
                    )
        )
        numbers


evaluate : Int -> List Int -> Int -> Result -> Result
evaluate current numbers length result =
    case result of
        Found a ->
            Found a

        Nothing ->
            let
                numbersArray =
                    Array.fromList numbers

                nextPreamble =
                    numbersArray |> Array.slice (current - length) current

                numberToSeek =
                    Array.get current numbersArray |> Maybe.withDefault 0

                sumResult =
                    hasSum (Array.toList nextPreamble) numberToSeek
            in
            case sumResult of
                True ->
                    evaluate (current + 1) numbers length result

                False ->
                    Found numberToSeek


getAnswerPart1 : String -> Int -> Int
getAnswerPart1 puzzle length =
    parsePuzzleInput puzzle
        |> (\numbers -> evaluate length numbers length Nothing)
        |> (\result ->
                case result of
                    Found a ->
                        a

                    Nothing ->
                        0
           )
