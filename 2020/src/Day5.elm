module Day5 exposing (..)

import Html exposing (col)
import Html.Attributes exposing (rows)
import List


type alias BoardingPass =
    { row : Int, column : Int, seat : Int }


puzzleInput : String
puzzleInput =
    "FFFBFFFRRL\nFFFBBBFLLL\nBFFFBFBRLR\nBFBFFFBRLL\nFFFBFBBRLR\nFBBBBFBLRR\nBFBBBFFLRR\nFBFFBBFLRL\nBFBBBBFRRL\nFBBFBFFRRL\nBBFFFBBLRR\nBFFFFFBRLR\nFBFFBFBLLR\nFBBFFFFLRR\nFFFFBBFRLR\nBBBFBFBLRL\nFFFBFFBRLL\nBBBFBBBRLL\nFBFFFBBRLR\nBFBBBBBLRL\nBFBFBBFRRR\nBFFFBBBLRL\nFBBFFBBRLR\nFBFBFFFRLR\nFBBFFBFLRR\nBFFFFFFLLR\nFBBFBBFRLR\nBFBFBFFLLL\nFFFBBBBRLL\nFBFFFFBLLR\nFFFBBBBLRR\nFFFFBFBRRL\nBBFBBBBLRL\nBBBBFFBLRR\nBFFBBFBRLR\nBBBFFFFRLR\nBBBBFFFRLR\nFBBFFBBRRL\nFFFFBFBRLL\nFBFFFBFRLL\nFBBBFBFLLR\nFFFFBBFRLL\nBBFFFBFLRL\nFFBFBFBRLR\nFBFFBBBLRR\nFFFBFFBLRL\nFFBFBBFLLR\nFFBFFFBLLR\nFBFBBBBRLL\nFBBBBFBRLR\nFBFFBBFRLL\nFFBFFBFLLR\nBBBFFBBLRL\nFFFBFFFLLR\nBBFBBBFRLR\nBBFFFFBRRL\nBFBFFFBLRL\nBBFFBFBRRL\nBBFBBFBRRR\nFFBBBFBRRL\nFFFBFBBRRL\nBBFBBBFLRL\nFBBFBBBRRR\nFFBFFBFRLL\nBBBFBFFLRL\nFBFFFFFLLR\nFFFBBFBLRL\nBBFFBFBRLL\nBBFBFFFRRL\nFBFBBFFRLL\nFBFBBFFLLR\nBFBFFBFRLR\nFBFBFFBLLL\nBFFFBBBRLR\nBBBFBFBRRL\nBFFBFFBLRL\nFBFFBFBLLL\nFBBBFBFRLL\nBFBFBFFLLR\nBFFFFBFRLL\nBFFBBFBLLR\nFFBBBBFRRL\nBFBBFBBRRR\nFBFBFFFRRL\nFFBFFFBRLR\nBBBFBBFLRL\nBFFBFFBLRR\nFFBFBFBLRL\nFFBFBFFLLR\nBFBFBBBRRL\nFFBFFFFLRR\nBFFBBBBRLL\nFFFBFFBRRR\nBBBBFFBLRL\nFFBFBFFLRL\nBFFBFFFLRL\nBBBFBFFRLR\nBBBFBFFRLL\nBBFBBBBRLL\nFFFBBBFLLR\nBFFFBBBRRR\nBBFFFFFLLL\nBBFBFBBLRR\nBFBBFFBRRL\nBFBBFFFRRR\nBFBBBBFRLR\nFBFFFFBRLR\nFFBBFBFLRR\nBFFBFFBRLL\nFBFFFBBRRL\nBBFFBBFRRR\nFBFBFBFLRL\nFBFBBFFRRL\nBFFBFBFRLL\nBBBFFBFLLR\nFFBFBBBRRR\nFBFFBBFLLL\nFFBFFBBLRR\nBBBFBBFRLL\nFFBBFFFRRL\nFFBFFBFLLL\nFFFBBBBLRL\nFFFBFBFRRR\nBBFFFFFLRR\nFBFBFBBLRR\nBBFFFFBLRR\nBBFFFBFLLR\nFBFBFBFLLR\nFFFFBBBLLL\nFBBBFFFLRL\nBFBBFFBLLR\nFFBBFFFLRR\nFBFBBFBLLR\nFFFBBBFRRR\nFBBFBFBRRR\nFBBBBFFLRL\nFFBFFBBRRL\nBBFFFFFRRR\nBFBBFFBLLL\nFFBBFBFRRR\nBBFFBBFRLL\nBBBBFFBRRR\nBBFBFBBRLR\nBFBFFFFLRR\nFFFBBBFRLR\nBFBBBFBLRR\nFBFBBBFLLR\nFFBBFFFLRL\nFBFBFFFLLL\nBBBFFBBRRL\nBBBBFFFLRL\nBFBFFBBRLR\nFBFBFBBLLL\nBFFBBBBLLR\nBBBFBBBRLR\nBBFFFBBLLL\nFBBBFFFLLR\nBBFBBFFRLL\nBFBBFFFLLL\nFFFFBBBRLL\nBFFBBBFRLL\nBFBBBBFLRR\nBFBBFBBRLL\nBFFBBBFRRL\nBFBFBBFRRL\nFBBFFBFRRL\nFFBFFBBLRL\nFBBFFBBLRR\nFBFBFBBLRL\nFBFBBFBLRL\nFBBBFFBRRL\nBFFFFFBRRR\nBBBFBBBLRL\nFBBFFBFLLR\nBFFBBBBRRR\nFFFBFBBRRR\nFFFBBFBLLR\nFBBFFFFLRL\nBBBFBFFLRR\nBBBBFFBRLL\nBFBBFBFLRR\nFBFBFBBLLR\nBFBFFBFRLL\nBBBFFFBLLL\nFBFFFBBLRL\nBFBFFBBRRR\nFBBFBFBRRL\nFFFBFBFLRR\nBBBFFBFLRL\nBFBBFBBLRL\nFBFFBBFRLR\nBFFFFBFLRL\nBFBBBFBLLR\nBFBFBFFLRL\nBFBBBBBLLL\nFFFBBFBRLR\nBBBBFBFLLL\nBBFFFFFRLL\nBBFBFBFRRL\nFFFBBBBRRL\nFFFBFBFRRL\nBBBBFFBRRL\nBFFBFFFLLL\nBFBBBFBLRL\nFFFBBFBRRL\nFBFBBFFLRR\nFFFBFFFRLL\nBBFFBBBRRL\nFBFFFFFLRR\nBBBBFFFRRL\nFFFBFFBLLR\nBBFBBBFRRL\nFFFBFBFLLL\nFBBFFBFRLL\nBFFFFBBRRL\nBFBFBFBLRR\nFBFBFBFLRR\nBBFBBFBLLR\nBBBFFBBLRR\nFBBFFBFRLR\nBBBFFFBLRL\nFFBFFBFRLR\nFFFBBFFLLR\nFFBFFFBRLL\nBFBFFFBRRL\nFBBBFBFLRR\nBBFFFBBLRL\nBFFBBFBLRR\nBFFFBBFLLR\nBFBFBBBLLL\nBFBFBBBRRR\nFFBFBFFRLL\nFFBBBBBRRL\nFFBFFFFRRR\nFFBBBBFRLR\nFBFFFFBRRR\nBFFBFFFLRR\nBBFBFFBLRL\nFBBBBBFRRR\nBBFFBBFLLL\nFFFBBBFLRL\nFFBBFBBLLR\nFFBFFFBRRL\nFBBBFBBLRL\nBFFBFBFLRL\nFBBFFFFRLR\nFFFBBFBRRR\nBFFBFBBLRL\nBFBBFBBLLR\nFBBFBFFLLR\nFFFFBFBRLR\nBFFFFFBRLL\nFBBBBBBLRL\nBFFBBBFRLR\nBBFBFBFRRR\nBBFBFFFRLR\nBBFBFFBLRR\nFFFBFFFRLR\nFBFBBBBRRL\nBBBFFFBRLR\nFFFBFFBLRR\nFBFFFBFRRR\nFFFFBBBRLR\nBBBFFFBRLL\nFFBBBFFLRR\nBFBBFFBRRR\nFBFBBBFLRL\nBFBFFBFRRL\nBBFBFBFRLR\nBFBBBBBRLR\nFFFFBBFLRR\nFBFBBFBLRR\nFFBFBFBLLL\nFFFBBBBRRR\nBBFFBBBRLR\nBFFFBFBLLR\nBFFFBFFLLR\nFFFFBBFLRL\nFBBBFBBRLL\nBFBBFBBLRR\nBBFBBFFRLR\nBFBBFFFLLR\nBBBFFFBLRR\nBFFBBFFLRR\nBBBFFBFRRL\nBBFFBFFLLL\nBFBFFFFRRR\nFBFBBFFLRL\nFBBBBBFLRL\nFFBBFBFLRL\nBFBBFBFLRL\nFBBFFBBRLL\nBBBFFFFLRL\nBFFFBBBLLL\nFFBBBFBRLR\nFFBFBBFRRL\nFBFFBBBRLL\nBBFBBFBRLL\nBFFFFFFLRR\nBFFFFBBRRR\nFFFFBBFLLR\nBFFFBBFLLL\nBBFFFFBRRR\nBFFBBBBLLL\nBFFBFFBLLR\nFFFFBBFRRL\nFFBFBFFRRR\nBFBFFFFLLL\nBBBFFFBRRR\nFFBBBFBRRR\nFBBBFFBRLR\nBFFBBBFLLL\nFBFBBFFRLR\nFBFFBBFRRR\nFBFBFBFRLL\nFBBBFFFLLL\nBFFBFFBRRL\nFBFFBBFLRR\nBFBBBBBLRR\nFBBBBBFRLR\nFFFFBBBLRL\nBBBFBFBLLL\nBBFFBBBLRL\nBFFBBFFRLL\nBBBFFFFLLL\nBBBBFFFLLR\nBBFBBFFLRR\nBFBFBFBLRL\nBBFFFBBRRR\nBBBFFFFLLR\nFBBBFFBRLL\nBFBBFFFRRL\nFFBBBFBLRR\nBFFBBBFLLR\nFFBFBBBRLL\nFBBBBBBLRR\nBFFBBBBRRL\nBFBBBFBLLL\nFBBFBFBLRR\nBFFFBFBRRR\nFBBFFFBRRL\nFFFBFBBLLR\nBBBFFFFRRL\nBFBBFFBRLR\nFBBBFBBLRR\nFBBFFFBLLR\nFBBFBBFRLL\nBBFBBBFLLR\nBBFFFBFRRL\nFBBBBFFRLR\nFFBFBFBRRL\nFFFBFFFRRR\nBFFBFBFLLR\nBFBFFFFRLL\nBFFFFFBLLL\nBFBBFFFLRR\nFFBFFFBRRR\nBBFFBBBRLL\nFBFFFFFRLL\nFFFBFFBRLR\nFBFFBFFRLL\nFFFBFFFLRL\nBBFBFFBLLL\nBBFFFFFLLR\nFBBBFFFRLR\nBFBFFBFLRR\nFFFBBFBLRR\nFBFFFBFLLR\nBFFFBBFLRL\nBFBBBBFRLL\nFFBBFFFRLL\nBBFBFBFLLL\nFBFFBFFRRL\nFBFBFBBRRL\nFBFFFFFLLL\nBBBFFFFRRR\nBFBBBFFLLL\nFBBFFFBLLL\nFFBBBFFRLL\nBFBBFBFRRR\nFFBBBBFLRL\nBFBBFFBRLL\nFFBBBFFRRL\nFBFBBBBLRL\nFFBFBFBLRR\nFBFFBFBLRR\nFFBFFFBLRL\nBBFFBFBLLL\nFBFBBBFRLL\nFFBFFBFLRL\nFBFBFBBRLR\nBFFBBFBRRL\nBFFFFFBLRL\nFFBFBBBLRR\nFBBBFFBLLL\nBFBFBFFRRR\nBBBFBFBLLR\nFBFBBFFRRR\nBFFFFFBRRL\nFFBFFBBLLL\nFBFFBBFRRL\nFBBBBBBRLL\nFFBBFBBRLL\nBBFBFBBLLR\nBBBFBFBLRR\nBBFFBBBLLL\nFBFFFFBLLL\nBFBBFBFLLR\nFBFFBFBRLL\nBFFBFFFRRR\nFFBBBFFRLR\nFBFFBBFLLR\nBBBFBFBRLL\nFBBFFBFLLL\nBFFBBBFLRL\nBBBBFFFRRR\nBBBFBBFRRR\nFFBFBFBLLR\nBFFBBFFRRL\nBBFFFFFRLR\nBBFBBBBRRR\nBBFFBFBLRL\nFBFFFFBLRR\nFFBFBBFLRL\nBFBFFBBLLL\nBBBFFBFLLL\nBBFBFFFLRR\nBFBBBBBLLR\nFFBFFFBLLL\nFBFFFBBLLR\nBFBFFBBLRR\nFFBBBFFLRL\nFBBFBFFLRR\nFBBFBFFRLL\nFBBFBFBRLR\nFBBFFBBLLL\nBBFFBFFLRL\nFBFBBBFRRR\nFFBFFBBRRR\nFBBBBBFRLL\nBBFFBFBLRR\nBBBFFBBRRR\nFFBBBBBRRR\nBBFFBBBLLR\nFBBFBFBLLL\nBBBFBFFLLL\nBBFFBBBLRR\nBFBFBFFRLR\nBBBFBBBLLL\nFBBFBFBLLR\nFBBBBFFLLR\nBFFFBBFRLR\nFFFFBFBRRR\nBFBFBFBLLR\nFFBFFBFRRL\nBFBBFFBLRL\nBFBBBFFLLR\nBBFFBFFLRR\nFBBBBFBRRR\nFBFFFBBLRR\nBBFBBBBLLL\nFBFBBBBRLR\nFFFBBFFLRR\nFFBFFBBLLR\nFBBBBBBRRR\nFFFFBBFLLL\nBFFBFFBRRR\nFFBBFFBRLR\nBBFFFFFLRL\nBBBFBBBLRR\nBFBFBFFLRR\nBFFFBBFRLL\nBFBBFBFLLL\nBFBFFBFLLR\nFFFFBBBLRR\nBBFBFFBRLL\nFFBBFBFRLR\nBBBFBBBRRL\nBFBFBFBRRR\nBFFFFFFRLR\nFBBBBFFLRR\nFBFBFFBLRL\nFFBBBFFLLR\nFBBFFFFRLL\nFBFBFBFRRL\nBFFBFFFRLR\nBFFFBFFRLL\nBBFBFBBRLL\nFFBBFBBLRR\nFBFBBFFLLL\nFBFBFFFLLR\nBFFBBFFLLR\nFFBBFFBRLL\nFBBBFFBLRL\nBBFBBBBLRR\nFFBFBBFRRR\nFFBFBBBLLR\nFFBBFBFRRL\nBBFFFBBRLR\nFFBBFFBLLL\nBFBFBBBLRR\nFFBFBFBRLL\nBFBBBFFRRL\nBFBFBFBRLR\nFFBFFBBRLL\nFFBBBBFRLL\nFBBBFBFRRL\nBBFBFBFRLL\nBFFBFFFRRL\nBFFBBBFRRR\nBBFBFFFLRL\nFBBBFBBLLR\nBFBFBBBRLR\nBBBFBFBRRR\nBFFBFBFRRL\nFFBBFFFLLR\nFFBFFFFRLR\nFBFBFFBRLR\nBFBFFFBRLR\nFFBFFBFLRR\nBBFBFBBLRL\nBBFBFFFLLR\nBFBFFBBLRL\nFFBBFFBLRL\nBFFBBBBLRR\nBBFBBFFRRL\nFBBFBFFLLL\nBFBFBFFRRL\nFFFBFFBLLL\nFBBFFFBRLR\nBFBBFBBRLR\nBFFBBFFLRL\nBFFFFFFLLL\nFBFBBBFRLR\nBFBFBFFRLL\nBBFFBFFRRR\nFBBBFBFLRL\nFFFFBFBLLR\nFBFBFBBRLL\nFBBFFBFRRR\nBBFBFFBLLR\nFBFBBFBRRL\nBFBBBFFLRL\nBBBBFBFRLL\nBFFFFFBLRR\nBBBBFFFLLL\nBFFBFBBLLR\nFFFBBFBRLL\nFBBBFBFLLL\nBFFFBFFRLR\nFBFFBFFRLR\nBBFFFFBLRL\nBFFBBFBRLL\nFFFBBFFRRR\nFFBBFBFLLL\nBBBFFBFLRR\nBFBBBFFRLL\nBFBFFFFRRL\nFFBBFBFLLR\nBBFFBBFLRR\nFFBBFBBRRR\nFBBBBBBLLR\nFFFBBBBLLR\nBBFFFFBRLR\nBFBFFBFLRL\nFBFFFBBRLL\nBBBFBBFLLR\nBFFBBFBLLL\nBFBBFBFRLL\nBBFBFBFLLR\nFFBBBFFLLL\nFBBFBBBRLR\nFBFFBFFLLL\nBFBBBBBRRR\nFFBFBBBRRL\nBFFBFBBLLL\nBBFFBFFLLR\nFBFBFFBRRR\nBBFBFFBRRL\nBBBBFBFLLR\nBFFFFFBLLR\nFFFBFBBLRL\nFBBFBBFLRL\nBBBFFFBRRL\nBFBBBFBRLL\nFBFFFBFLRL\nBBBFFBFRLL\nBFBFFFFRLR\nBFFFFFFLRL\nBBFFFBBLLR\nBBFBBFBLRR\nBFBFBBBLRL\nFFFFBBBRRL\nFBBFBFBLRL\nFBFBBBBLRR\nFFBBBBFRRR\nBBFFBFBRRR\nBBFFFBFRRR\nBFBBBFBRRR\nBBFFBBFLLR\nFBFFBBBLRL\nBFBBFBFRRL\nFBFBFBFRLR\nBFBFFFBLLR\nFBFFBFBRLR\nBFBFFBBRLL\nBFBFBFBRLL\nFBBBFBFRRR\nFBBBFBBRRL\nFBFFFBFRLR\nFBFBBBFRRL\nBFBFFFBLRR\nBBBBFBFLRL\nBBBFBFFRRL\nBFFFFFFRRL\nBFBBBFBRRL\nFBBBBFBLLL\nBBFBBBFLLL\nBFFFBBBRLL\nFFBFBBFRLL\nBBFBBFFLLL\nBFFBFBFLLL\nFFBBBBBLLL\nFBBFFFFLLL\nBBBFFFFLRR\nBFFFFBFLRR\nBFFBFBBLRR\nBFFBFBBRLR\nFBBBFFBLLR\nBFFBFBFRLR\nBBFBBBBRLR\nBBFBBFBRLR\nFFBFBBBRLR\nBFFFBBFRRL\nBBBFFBFRRR\nBFBBFFFRLL\nFFFBBFFRRL\nFFFFBFBLLL\nFFFFBFBLRL\nBBBFFBBRLL\nFFFBFBFRLR\nBFFFBBFLRR\nBFFFFBFLLL\nFFBBFFBRRL\nFBFFFBBRRR\nFFBFBFFRRL\nBFBBFFBLRR\nBBFFBBFRRL\nFFBBBBBLRR\nBFBBFFFRLR\nBFFFFBFLLR\nFBFFBFFLLR\nBFFFFBBRLL\nBBFFBFBRLR\nFBFBFFFLRL\nFBFBFFFRLL\nFBFFFFBRRL\nBFFFBFBLRR\nBFBFFBFRRR\nFFBBFFFLLL\nBFBFBBFLLR\nFFFBFBBLRR\nFBBBBBBLLL\nBBBFBBBRRR\nFBFFBFBRRR\nFBBFBBBLLR\nFBBFFBFLRL\nBBFBBFBLLL\nBBFBBBBRRL\nFBFBBBBLLL\nFBBBBFFRRR\nFFBBFFBLRR\nFBFFBBBRRR\nFFBBFBBRLR\nFFFBFFBRRL\nBBBBFFBLLR\nBBFBBFFLLR\nBBFFBFFRLL\nFBFFBBBRLR\nFFBBBBFLRR\nFBBFFBBLLR\nFBBBBFBLLR\nFBFBFFBLRR\nBFFFBFFRRL\nFBBBBFFRRL\nFFBBFFBLLR\nBBBFFBFRLR\nBFBBBBFLLL\nBBFBBBFRRR\nFFFBFFFLRR\nBBFFBBBRRR\nFBBFBBFRRR\nBFFBBFFRRR\nFFBBFFFRRR\nBFFBFBBRLL\nFBBBFBBLLL\nFBFBFFBRLL\nFBBFBBBLLL\nBFBFFFBLLL\nFFFBFBFLLR\nBBFFBFFRRL\nBFBBBBBRRL\nFBFFFFFLRL\nBFFFBFFLLL\nFBBFFFBRRR\nFBBFBBFLRR\nBFFFBBBRRL\nBFBFFFFLRL\nFBFFBFBLRL\nBBBFFFBLLR\nFBBFFBBLRL\nFFFBFBFLRL\nBBFFBFFRLR\nFBFFFFBRLL\nBBFBBFBLRL\nBFFFBFFLRL\nFBBFFFFLLR\nBFFBBFFRLR\nFFBFFFFLRL\nFBFFFFBLRL\nFBBBBBBRLR\nBBFFFBBRLL\nBFFFBBBLLR\nBFFBBBBRLR\nFBBBBFFLLL\nFFBFBFFRLR\nBFFFFBBLLL\nFBFFFBFRRL\nBFBFBBFRLL\nFFBBBFBRLL\nFBBFBBBLRR\nFBBFFFBLRR\nBFFFFFFRLL\nFFBBBBBLLR\nBBBBFBFLRR\nBFBFBBBRLL\nBFBBBBFLLR\nFFFBFFFLLL\nBFFBFBFRRR\nBBBBFFFLRR\nFBBFFFFRRR\nBFFFBBFRRR\nFBBFBFFRRR\nBFBBFBBLLL\nFFBBBBBRLR\nBBBFFBBLLR\nBBBFBFFRRR\nBBFFFFBLLL\nBFFBFFFLLR\nFFBFBBFLRR\nFFBBFFFRLR\nFBFBBFBLLL\nFBBBFBBRRR\nFBFFBFBRRL\nBFFFBFBLLL\nFFFFBBBLLR\nBFFBBFBLRL\nBFFBBBBLRL\nFBFFFFFRLR\nFBFFBFFLRR\nBFFFFBBLRR\nFBBBFBFRLR\nBBBFBBFLLL\nFFBFFBBRLR\nBBFBFBFLRR\nFBFBBFBRLL\nBFFBFBFLRR\nFBBBBBFRRL\nFBBBBBBRRL\nBBFBFFFLLL\nFFBBBFFRRR\nBFBBBFBRLR\nBFBFFFFLLR\nBBBFFFFRLL\nFBBFFFBRLL\nBFFFFFFRRR\nFBFFFFFRRR\nFBFFBBBLLL\nBFBFBBFLRR\nBBFBBBBLLR\nFBFBBBFLRR\nFFFBBFFRLL\nBFBFBBBLLR\nFFBBFBBRRL\nFBFBBBBLLR\nBBFBFBBLLL\nFBBFBBBRRL\nFBBBBFFRLL\nFBFBFBBRRR\nBFBFBBFRLR\nBFBBFBFRLR\nFBFFBBBLLR\nBFBFBFBRRL\nBFFBFFFRLL\nBFFFFBFRLR\nFBBBFBBRLR\nFFBFFFFRLL\nFBBFBBFLLR\nBFBFFBBRRL\nFFBFBBBLRL\nBBBFBFFLLR\nFBFBFFFRRR\nFFFBBBFRLL\nBBBFBBBLLR\nFBBBFFFRLL\nFFBFBFFLLL\nFFBBBBBLRL\nBFBBBFFRLR\nFFBBBBFLLL\nFBFFFBFLLL\nFFFBBBFLRR\nBBFBBBFLRR\nFBBFBBFRRL\nFBBBBBFLRR\nBBFFBBFLRL\nFFBFFBFRRR\nFBBBFFFRRL\nFFBBBFBLRL\nBBFFFBBRRL\nFBBBFFFRRR\nFFFFBBBRRR\nFBBBBBFLLR\nFBBBBFBRLL\nFBFBBBBRRR\nFFBFFFFLLR\nBBBBFFBLLL\nFBFFFFFRRL\nBBFFFFBLLR\nFFBBFBBLRL\nFBFFFBFLRR\nBFBFBBFLRL\nBBBFBBFRRL\nFFFBBFFLRL\nFBBFBFFLRL\nFBBFBFFRLR\nBBFBFBBRRR\nBFBFBBFLLL\nBBFBBBFRLL\nFBBFBBBLRL\nBFFFFBFRRL\nFBFBFBFRRR\nFBFBBBFLLL\nBFFFFBBLLR\nBBFBBFFRRR\nFFBFBFFLRR\nBBFFFBFRLR\nBBBFFBBRLR\nFBFFBFFRRR\nFFBFBBFLLL\nBFFBBBFLRR\nFBFBFBFLLL\nBFFFFBBRLR\nFFFBBFBLLL\nBBBFBFBRLR\nBFBFFBFLLL\nFFFBBBBLLL\nFFBFBFBRRR\nFBFBBFBRRR\nFBBFBBFLLL\nBBFBFBFLRL\nBFBBBBBRLL\nFFBBFFBRRR\nFFFFBBFRRR\nBFBBBFFRRR\nFFFBFBFRLL\nFFBFFFFRRL\nFFFBBBBRLR\nFBBBFFBRRR\nBBFFFBFLRR\nFBFFFBBLLL\nFBBBBBFLLL\nBBFBFFFRLL\nBFFFBBBLRR\nFFBFBBBLLL\nBBFFFBFRLL\nFFBBBBBRLL\nFBFFBFFLRL\nFFFFBFBLRR\nFBFBFFBRRL\nBFFFFBFRRR\nFBBBBFBLRL\nBBBFBBFRLR\nFFBBBBFLLR\nFBFBBFBRLR\nFBBFBBBRLL\nFBBBFFBLRR\nFBBFBFBRLL\nFFBBFBFRLL\nFFFBFBBRLL\nBBFFBFBLLR\nFBFBFFBLLR\nBBFBFFBRLR\nBFFBBFBRRR\nBFFFBFBLRL\nBFBFBFBLLL\nBBBBFFFRLL\nFBBFFBBRRR\nBBFBFFBRRR\nBBFBFBBRRL\nBFBBBBFRRR\nBFFFFBBLRL\nBBBFFBBLLL\nBFBBFFFLRL\nBFFFBFFRRR\nBFFBFFBRLR\nFBBFFFBLRL\nBFBBBBFLRL\nFBFBFFFLRR\nFFFBBBFRRL\nBFFBFFBLLL\nBFBBFBBRRL\nBFFFBFBRRL\nBFBFFBBLLR\nFFBBBFBLLR\nFFBBFBBLLL\nFFFBFBBLLL\nBBFBBFBRRL\nBFFBBFFLLL\nBFFFBFFLRR\nBFBFFFBRRR\nBBBBFFBRLR\nFBFFBBBRRL\nBBBFBBFLRR\nBBFFFFBRLL\nBBFBFFFRRR\nFFBBBFBLLL\nFBBBBFBRRL\nBBFFFFFRRL\nFFBFFFBLRR\nBFFBFBBRRL\nFFBFBBFRLR\nFBBBFFFLRR\nBBFFBBFRLR\nFBBFFFFRRL\nBBFBBFFLRL\nFFBFFFFLLL\nFFFBBFFLLL\nBBFFFBFLLL\nBFFFBFBRLL\nFFFBBFFRLR"


parsePuzzleInput : String -> List (List (List String))
parsePuzzleInput str =
    String.split "\n" str
        |> List.map
            (\a ->
                let
                    letters =
                        String.split "" a
                in
                [ List.take 7 letters, List.drop 7 letters ]
            )


findRegion : String -> List Int -> List String -> Int
findRegion direction range directions =
    case List.length range of
        1 ->
            List.head range |> Maybe.withDefault 0

        _ ->
            let
                nextDirection =
                    List.head directions |> Maybe.withDefault ""

                nextRange =
                    case nextDirection of
                        "F" ->
                            List.take (List.length range // 2) range

                        "B" ->
                            List.drop (List.length range // 2) range

                        _ ->
                            [ List.head range |> Maybe.withDefault 0 ]

                nextDirections =
                    List.drop 1 directions
            in
            case direction of
                "F" ->
                    findRegion nextDirection nextRange nextDirections

                "B" ->
                    findRegion nextDirection nextRange nextDirections

                _ ->
                    0


swapsies : String -> String
swapsies str =
    String.replace "R" "B" str |> String.replace "L" "F"


convertToSeatNumber : Int -> Int -> Int
convertToSeatNumber row column =
    (row * 8) + column


convertBoardingPass : List (List String) -> BoardingPass
convertBoardingPass ticket =
    let
        rowLetters =
            List.head ticket |> Maybe.withDefault []

        startingRowLetter =
            List.head rowLetters |> Maybe.withDefault ""

        row =
            findRegion startingRowLetter (List.range 0 127) rowLetters

        columnLetters =
            List.reverse ticket
                |> List.head
                |> Maybe.withDefault []
                |> List.map swapsies

        startingColumnLetter =
            List.head columnLetters |> Maybe.withDefault ""

        column =
            findRegion startingColumnLetter (List.range 0 7) columnLetters
    in
    { row = row, column = column, seat = convertToSeatNumber row column }


findEmptySeats : Int -> Int -> List BoardingPass -> List BoardingPass
findEmptySeats startingRow endingRow seats =
    List.range startingRow endingRow
        |> List.foldl
            (\row missing ->
                let
                    found =
                        List.range 0 7
                            |> List.foldl
                                (\column b ->
                                    let
                                        notFound =
                                            List.filter (\a -> a.row == row && a.column == column) seats |> List.isEmpty
                                    in
                                    case notFound of
                                        True ->
                                            { row = row, column = column, seat = convertToSeatNumber row column } :: b

                                        _ ->
                                            b
                                )
                                []
                in
                found :: missing
            )
            []
        |> List.concat


getAnswerPart1 : String -> Int
getAnswerPart1 puzzle =
    parsePuzzleInput puzzle
        |> List.map convertBoardingPass
        |> List.map (\a -> a.seat)
        |> List.sort
        |> List.reverse
        |> List.head
        |> Maybe.withDefault 0


getAnswerPart2 : String -> Int
getAnswerPart2 puzzle =
    parsePuzzleInput puzzle
        |> List.map convertBoardingPass
        |> List.sortBy (\pass -> pass.row)
        |> (\passes ->
                let
                    startRow =
                        List.head passes
                            |> (\a ->
                                    case a of
                                        Maybe.Just { row } ->
                                            row

                                        _ ->
                                            0
                               )

                    endRow =
                        List.reverse passes
                            |> List.head
                            |> (\a ->
                                    case a of
                                        Maybe.Just { row } ->
                                            row - 1

                                        _ ->
                                            0
                               )
                in
                findEmptySeats startRow endRow passes
           )
        |> List.map (\pass -> pass.seat)
        |> List.head
        |> Maybe.withDefault 0
